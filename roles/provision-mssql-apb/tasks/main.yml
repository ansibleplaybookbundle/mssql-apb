---
##############################################################################
## Provision mssql-server
## This role executes much of the needed functionality to provision an
## application using an Ansible Playbook Bundle.  Included in the comments
## below are some sample resources for getting started deploying an application
## to OpenShift.
##############################################################################
- name: Create ImageStream
  openshift_v1_image_stream:
    name: mssql-server-linux
    namespace: '{{ namespace }}'
    tags:
      - name: '{{ mssql_image_tag }}'
    docker_image_repository: '{{ mssql_image }}'
    state: '{{ state }}'
  async: 180
  poll: 0
  register: create_is
  when: mssql_local != true

- name: Create secret
  k8s_v1_secret:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    string_data:
      ACCEPT_EULA: "{{ lookup('template', 'eula.j2') }}"
      MSSQL_SA_PASSWORD: '{{ mssql_sa_pw }}'
      MSSQL_PID: '{{ mssql_pid }}'
      MSSQL_LCID: '{{ mssql_lcid | string }}'
      MSSQL_AGENT_ENABLED: '{{ mssql_agent | string }}'
      MSSQL_MEMORY_LIMIT_MB: '{{ (( memory_limit | int ) * 1000 ) | string }}'
    state: '{{ state }}'
  async: 180
  poll: 0
  register: create_secret

- name: Create PVC for persistent deployment
  k8s_v1_persistent_volume_claim:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ volume_size }}G'
    state: '{{ state }}'
  async: 180
  poll: 0
  register: create_pvc
  when: _apb_plan_id == "persistent"


##############################################################################
## A Kubernetes service serves as an internal load balancer.  It identifies a
## set of replicated pods in order to proxy the connections it receives to them.
##############################################################################
- name: Create service
  k8s_v1_service:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    selector:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    ports:
      - name: '{{ service_name }}'
        port: '{{ service_port }}'
        target_port: 1433
    state: '{{ state }}'


##############################################################################
## An OpenShift Origin deployment configuration provides a replication
## controller, spins up pods, and also provides the ability to transition from
## one deployment of an image to a new one.
##############################################################################
- name: Create ephemeral deployment config
  openshift_v1_deployment_config:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    replicas: 1
    strategy_type: Recreate
    selector:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    spec_template_metadata_labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    containers:
      - envFrom:
          - secretRef:
              name: '{{ service_instance }}'
        image: ""
        imagePullPolicy: '{{ mssql_image_pull }}'
        name: '{{ service_name }}'
        livenessProbe:
          initialDelaySeconds: 60
          periodSeconds: 20
          tcpSocket:
            port: 1433
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -i
              - -c
              - |
                sqlcmd -S localhost -U SA -P "$MSSQL_SA_PASSWORD" -Q "IF DB_ID('{{ mssql_db }}') IS NULL
                BEGIN
                  CREATE DATABASE {{ mssql_db }}
                END"
          initialDelaySeconds: 15
          timeoutSeconds: 2
        resources:
          limits:
            memory: '{{ memory_limit }}G'
          requests:
            memory: '{{ memory_request }}G'
        ports:
          - container_port: 1433
            protocol: TCP
        volumeMounts:
          - name: '{{ mssql_data_volume_name }}'
            mountPath: '{{ mssql_data_path }}'
    volumes:
      - name: '{{ mssql_data_volume_name }}'
        emptyDir: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        image_change_params:
          automatic: true
          container_names:
            - '{{ service_name }}'
          _from:
            kind: ImageStreamTag
            name: 'mssql-server-linux:{{ mssql_image_tag }}'
            namespace: '{{ namespace }}'
    state: '{{ state }}'
  when: _apb_plan_id != "persistent"

- name: Create persistent deployment config
  openshift_v1_deployment_config:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    replicas: 1
    strategy_type: Recreate
    selector:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    spec_template_metadata_labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    containers:
      - envFrom:
          - secretRef:
              name: '{{ service_instance }}'
        image: ""
        imagePullPolicy: '{{ mssql_image_pull }}'
        name: '{{ service_name }}'
        livenessProbe:
          initialDelaySeconds: 60
          periodSeconds: 20
          tcpSocket:
            port: 1433
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -i
              - -c
              - |
                sqlcmd -S localhost -U SA -P "$MSSQL_SA_PASSWORD" -Q "IF DB_ID('{{ mssql_db }}') IS NULL
                BEGIN
                  CREATE DATABASE {{ mssql_db }}
                END"
          initialDelaySeconds: 15
          timeoutSeconds: 2
        resources:
          limits:
            memory: '{{ memory_limit }}G'
          requests:
            memory: '{{ memory_request }}G'
        ports:
          - container_port: 1433
            protocol: TCP
        volumeMounts:
          - name: '{{ mssql_data_volume_name }}'
            mountPath: '{{ mssql_data_path }}'
    volumes:
      - name: '{{ mssql_data_volume_name }}'
        persistent_volume_claim:
          claim_name: '{{ service_instance }}'
    triggers:
      - type: ConfigChange
      - type: ImageChange
        image_change_params:
          automatic: true
          container_names:
            - '{{ service_name }}'
          _from:
            kind: ImageStreamTag
            name: 'mssql-server-linux:{{ mssql_image_tag }}'
            namespace: '{{ namespace }}'
    state: '{{ state }}'
  when: _apb_plan_id == "persistent"


##############################################################################
## Encode bind credentials.
##############################################################################
- name: Encode bind credentials
  asb_encode_binding:
    fields:
      DB_TYPE: mssql
      DB_HOST: '{{ service_instance }}.{{ namespace }}.svc'
      DB_PORT: '{{ service_port }}'
      DB_ADMIN_USER: SA
      DB_ADMIN_PASSWORD: '{{ mssql_sa_pw }}'
      DB_NAME: '{{ mssql_db }}'
      DB_URI: 'Data Source={{ service_instance }}.{{ namespace }}.svc,{{ service_port }}; Initial Catalog={{ mssql_db }}; User Id=SA; Password={{ mssql_sa_pw }};'
  when: action == 'provision'

- name: 'Check on ImageStream task'
  async_status: jid={{ create_is.ansible_job_id }}
  register: is_job_result
  until: is_job_result.finished
  retries: 120
  when: mssql_local != true

- name: 'Check on secret task'
  async_status: jid={{ create_secret.ansible_job_id }}
  register: s_job_result
  until: s_job_result.finished
  retries: 120

- name: 'Check on PVC task'
  async_status: jid={{ create_pvc.ansible_job_id }}
  register: pvc_job_result
  until: pvc_job_result.finished
  retries: 120
  when: _apb_plan_id == "persistent"

- name: Wait for mssql to come up
  wait_for:
    host: '{{ service_instance }}.{{ namespace }}.svc'
    port: '{{ service_port }}'
    timeout: 360
  when: action == 'test'
